"""
This module implementas the basic abstract type for actions
"""

class Action(object):
    """
    This is the most abstract action, implements the basic needed method to load
    save and execute an action
    """

    def __init__(self):
        """
        This is the constructor
        """
        pass

    def execute(self):
        """
        This is the abstract method used to execute the action
        """
        raise NotImplementedError()

    def save(self):
        """
        This is the abstract method used to save the action
        """
        raise NotImplementedError()

    def load(self, data):
        """
        This is the abstract method used to load the action from file
        """
        raise NotImplementedError()


class FileAction(Action):
    """
    This is an abstract implementation of a action dealing with a file ,
    it implements how to load and save the path
    """
    def __init__(self, path=""):
        """
        This is the constructor
        @param path: str, This is the path used by the action in the
                        execute method
        """
        Action.__init__(self)
        ##this is the path of the file
        self.path = path


    def save(self):
        """
        This method generate a dictionary json savable and
        returns it
        @returns dict
        """
        to_return = {"action_type": self.__class__.__name__,
                     "path": self.path}

        return to_return

    def load(self, dataDict):
        """
        This function reloads the needed saved datat inside the class
        so it can be executed
        
        @param dataDict: dict, this is the dict previosuly generated by the save
                                method
        """
        self.path = dataDict["path"]
